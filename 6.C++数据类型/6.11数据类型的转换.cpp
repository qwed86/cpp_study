# include<iostream>
using namespace std;

int main()
{
    char a =30;
    int b= 102400;
    long long c = 15000000000001;
    // 如果一个表达式中出现了不同类型操作数的混合运算，较低类型将自动向较高类型转换。
    cout<<"a+b+c="<<a+b+c<<endl;  //转为long long类型

    // 当表达式中含有浮点型操作数时，所有操作数都将转换为浮点型。
    cout<<"8/5="<<8/5.0<<endl;

    // 赋值运算的右值类型与左值类型不一致时，将右值类型提升/降低为左值类型。
	// 赋值运算右值超出了左值类型的表示范围，把该右值截断后赋给左值，所得结果可能毫无意义。
	int d = 23.59;        // 降低了精度。
	cout << "d=" << d << endl;

    // 强制类型转换的语法：(目标类型)表达式或目标类型(表达式)

    unsigned int e = (unsigned int)4294967295+10;       // 值被截断，从高位截断
	cout << "e=" << e << endl;
	// 4294967295         11111111111111111111111111111111
	// 4294967296 000100000000000000000000000000000000
	// 4294967297 000100000000000000000000000000000001
    
}


